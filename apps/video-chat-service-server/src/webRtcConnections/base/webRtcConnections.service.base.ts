/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WebRtcConnections as PrismaWebRtcConnections,
  User as PrismaUser,
  ChatSessions as PrismaChatSessions,
} from "@prisma/client";

import { WebRtcConnectionsCreateInput } from "./WebRtcConnectionsCreateInput";
import { WebRtcConnectionsFindManyArgs } from "./WebRtcConnectionsFindManyArgs";

export class WebRtcConnectionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WebRtcConnectionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.webRtcConnections.count(args);
  }

  async webRtcConnectionsItems(
    args: Prisma.WebRtcConnectionsFindManyArgs
  ): Promise<PrismaWebRtcConnections[]> {
    return this.prisma.webRtcConnections.findMany(args);
  }
  async webRtcConnections(
    args: Prisma.WebRtcConnectionsFindUniqueArgs
  ): Promise<PrismaWebRtcConnections | null> {
    return this.prisma.webRtcConnections.findUnique(args);
  }
  async createWebRtcConnections(
    args: Prisma.WebRtcConnectionsCreateArgs
  ): Promise<PrismaWebRtcConnections> {
    return this.prisma.webRtcConnections.create(args);
  }
  async updateWebRtcConnections(
    args: Prisma.WebRtcConnectionsUpdateArgs
  ): Promise<PrismaWebRtcConnections> {
    return this.prisma.webRtcConnections.update(args);
  }
  async deleteWebRtcConnections(
    args: Prisma.WebRtcConnectionsDeleteArgs
  ): Promise<PrismaWebRtcConnections> {
    return this.prisma.webRtcConnections.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.webRtcConnections
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getChatSession(parentId: string): Promise<PrismaChatSessions | null> {
    return this.prisma.webRtcConnections
      .findUnique({
        where: { id: parentId },
      })
      .chatSession();
  }
  async CreateWebRtcConnection(
    args: WebRtcConnectionsCreateInput
  ): Promise<WebRtcConnectionsCreateInput> {
    throw new Error("Not implemented");
  }
  async GetAllWebRtcConnections(
    args: WebRtcConnectionsFindManyArgs
  ): Promise<WebRtcConnectionsFindManyArgs[]> {
    throw new Error("Not implemented");
  }
}
