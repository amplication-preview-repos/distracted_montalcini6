/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ChatSessionsService } from "../chatSessions.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ChatSessionsCreateInput } from "./ChatSessionsCreateInput";
import { ChatSessions } from "./ChatSessions";
import { ChatSessionsFindManyArgs } from "./ChatSessionsFindManyArgs";
import { ChatSessionsWhereUniqueInput } from "./ChatSessionsWhereUniqueInput";
import { ChatSessionsUpdateInput } from "./ChatSessionsUpdateInput";
import { WebRtcConnectionsFindManyArgs } from "../../webRtcConnections/base/WebRtcConnectionsFindManyArgs";
import { WebRtcConnections } from "../../webRtcConnections/base/WebRtcConnections";
import { WebRtcConnectionsWhereUniqueInput } from "../../webRtcConnections/base/WebRtcConnectionsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ChatSessionsControllerBase {
  constructor(
    protected readonly service: ChatSessionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatSessions })
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createChatSessions(
    @common.Body() data: ChatSessionsCreateInput
  ): Promise<ChatSessions> {
    return await this.service.createChatSessions({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        user1: true,
        user2: true,
        sessionId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatSessions] })
  @ApiNestedQuery(ChatSessionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatSessionsItems(
    @common.Req() request: Request
  ): Promise<ChatSessions[]> {
    const args = plainToClass(ChatSessionsFindManyArgs, request.query);
    return this.service.chatSessionsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        user1: true,
        user2: true,
        sessionId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatSessions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatSessions(
    @common.Param() params: ChatSessionsWhereUniqueInput
  ): Promise<ChatSessions | null> {
    const result = await this.service.chatSessions({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        user1: true,
        user2: true,
        sessionId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatSessions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateChatSessions(
    @common.Param() params: ChatSessionsWhereUniqueInput,
    @common.Body() data: ChatSessionsUpdateInput
  ): Promise<ChatSessions | null> {
    try {
      return await this.service.updateChatSessions({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          user1: true,
          user2: true,
          sessionId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatSessions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteChatSessions(
    @common.Param() params: ChatSessionsWhereUniqueInput
  ): Promise<ChatSessions | null> {
    try {
      return await this.service.deleteChatSessions({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          user1: true,
          user2: true,
          sessionId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/webRtcConnectionsItems")
  @ApiNestedQuery(WebRtcConnectionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WebRtcConnections",
    action: "read",
    possession: "any",
  })
  async findWebRtcConnectionsItems(
    @common.Req() request: Request,
    @common.Param() params: ChatSessionsWhereUniqueInput
  ): Promise<WebRtcConnections[]> {
    const query = plainToClass(WebRtcConnectionsFindManyArgs, request.query);
    const results = await this.service.findWebRtcConnectionsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isActive: true,
        connectionId: true,

        user: {
          select: {
            id: true,
          },
        },

        chatSession: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/webRtcConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "update",
    possession: "any",
  })
  async connectWebRtcConnectionsItems(
    @common.Param() params: ChatSessionsWhereUniqueInput,
    @common.Body() body: WebRtcConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webRtcConnectionsItems: {
        connect: body,
      },
    };
    await this.service.updateChatSessions({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/webRtcConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "update",
    possession: "any",
  })
  async updateWebRtcConnectionsItems(
    @common.Param() params: ChatSessionsWhereUniqueInput,
    @common.Body() body: WebRtcConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webRtcConnectionsItems: {
        set: body,
      },
    };
    await this.service.updateChatSessions({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/webRtcConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ChatSessions",
    action: "update",
    possession: "any",
  })
  async disconnectWebRtcConnectionsItems(
    @common.Param() params: ChatSessionsWhereUniqueInput,
    @common.Body() body: WebRtcConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webRtcConnectionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateChatSessions({
      where: params,
      data,
      select: { id: true },
    });
  }
}
