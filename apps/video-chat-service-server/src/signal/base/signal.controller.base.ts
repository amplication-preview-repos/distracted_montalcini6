/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SignalService } from "../signal.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SignalCreateInput } from "./SignalCreateInput";
import { Signal } from "./Signal";
import { SignalFindManyArgs } from "./SignalFindManyArgs";
import { SignalWhereUniqueInput } from "./SignalWhereUniqueInput";
import { SignalUpdateInput } from "./SignalUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SignalControllerBase {
  constructor(
    protected readonly service: SignalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Signal })
  @nestAccessControl.UseRoles({
    resource: "Signal",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSignal(@common.Body() data: SignalCreateInput): Promise<Signal> {
    return await this.service.createSignal({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        senderId: true,
        receiverId: true,
        signal: true,
        sessionId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Signal] })
  @ApiNestedQuery(SignalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Signal",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async signals(@common.Req() request: Request): Promise<Signal[]> {
    const args = plainToClass(SignalFindManyArgs, request.query);
    return this.service.signals({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        senderId: true,
        receiverId: true,
        signal: true,
        sessionId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Signal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Signal",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async signal(
    @common.Param() params: SignalWhereUniqueInput
  ): Promise<Signal | null> {
    const result = await this.service.signal({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        senderId: true,
        receiverId: true,
        signal: true,
        sessionId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Signal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Signal",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSignal(
    @common.Param() params: SignalWhereUniqueInput,
    @common.Body() data: SignalUpdateInput
  ): Promise<Signal | null> {
    try {
      return await this.service.updateSignal({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          senderId: true,
          receiverId: true,
          signal: true,
          sessionId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Signal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Signal",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSignal(
    @common.Param() params: SignalWhereUniqueInput
  ): Promise<Signal | null> {
    try {
      return await this.service.deleteSignal({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          senderId: true,
          receiverId: true,
          signal: true,
          sessionId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/api/signal-create")
  @swagger.ApiOkResponse({
    type: SignalCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateSignalPost(
    @common.Body()
    body: SignalCreateInput
  ): Promise<SignalCreateInput> {
    return this.service.CreateSignalPost(body);
  }

  @common.Get("/api/signal")
  @swagger.ApiOkResponse({
    type: SignalCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSignals(
    @common.Body()
    body: SignalCreateInput
  ): Promise<SignalCreateInput[]> {
    return this.service.GetSignals(body);
  }
}
