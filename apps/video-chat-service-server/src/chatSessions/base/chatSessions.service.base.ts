/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChatSessions as PrismaChatSessions,
  WebRtcConnections as PrismaWebRtcConnections,
} from "@prisma/client";

export class ChatSessionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatSessionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatSessions.count(args);
  }

  async chatSessionsItems(
    args: Prisma.ChatSessionsFindManyArgs
  ): Promise<PrismaChatSessions[]> {
    return this.prisma.chatSessions.findMany(args);
  }
  async chatSessions(
    args: Prisma.ChatSessionsFindUniqueArgs
  ): Promise<PrismaChatSessions | null> {
    return this.prisma.chatSessions.findUnique(args);
  }
  async createChatSessions(
    args: Prisma.ChatSessionsCreateArgs
  ): Promise<PrismaChatSessions> {
    return this.prisma.chatSessions.create(args);
  }
  async updateChatSessions(
    args: Prisma.ChatSessionsUpdateArgs
  ): Promise<PrismaChatSessions> {
    return this.prisma.chatSessions.update(args);
  }
  async deleteChatSessions(
    args: Prisma.ChatSessionsDeleteArgs
  ): Promise<PrismaChatSessions> {
    return this.prisma.chatSessions.delete(args);
  }

  async findWebRtcConnectionsItems(
    parentId: string,
    args: Prisma.WebRtcConnectionsFindManyArgs
  ): Promise<PrismaWebRtcConnections[]> {
    return this.prisma.chatSessions
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webRtcConnectionsItems(args);
  }
}
